<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.2">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Process Journal" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.delayedStart">false</boolProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
          <stringProp name="filename">D:/Projects/Jmeter/PJ_v1.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">BranchID,UserID,Password</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
          <boolProp name="WebDriverConfig.acceptinsecurecerts">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <stringProp name="WebDriverConfig.driver_path">D:\Projects\Jmeter\Load-Test\AMBS-Load-Test\chromedriver-win64\chromedriver.exe</stringProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <boolProp name="WebDriverConfig.headless">false</boolProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <stringProp name="ChromeDriverConfig.additional_args">incognito</stringProp>
          <stringProp name="ChromeDriverConfig.binary_path"></stringProp>
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <stringProp name="WebDriverConfig.custom_capabilites"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">
          <stringProp name="WebDriverSampler.script">import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.time.Duration;
import java.util.Base64;

WDS.sampleResult.sampleStart()
WebDriver driver = WDS.browser;
var js = (JavascriptExecutor) driver;
var logger = WDS.Log;

//String user = &quot;admin&quot;;//WDS.vars.get(&quot;UserID&quot;);
//String password = &quot;Test@123&quot;;
//String branch = &quot;165&quot;;

String user = WDS.vars.get(&quot;UserID&quot;);
String password = WDS.vars.get(&quot;Password&quot;);
String branch = WDS.vars.get(&quot;BranchID&quot;);


WDS.Log.info(&quot;User: &quot; + user + &quot; Password: &quot; + password + &quot; Branch: &quot; + branch);

String baseUrl = &quot;https://192.168.97.56:1107//Programs/P_ProcessJournal.aspx?&quot;;

driver.get(baseUrl);


driver.findElement(By.id(&quot;login_UserName&quot;)).sendKeys(new String[]{user});
driver.findElement(By.id(&quot;login_Password&quot;)).sendKeys(new String[]{password});
driver.findElement(By.id(&quot;login_LoginImageButton&quot;)).click();

var wait = new WebDriverWait(driver, Duration.ofSeconds(1));


//Select Branch
wait.until(ExpectedConditions.presenceOfElementLocated(By.id(&quot;ctl00_ContentPlaceHolder1_ddlBranchId&quot;)));
Select ddlBranchId = new Select(driver.findElement(By.id(&quot;ctl00_ContentPlaceHolder1_ddlBranchId&quot;)));
wait.until(webDriver -&gt; ddlBranchId.getOptions().size() &gt; 1);
ddlBranchId.selectByValue(branch);
Thread.sleep(3000);
		
//Refresh	
driver.findElement(By.xpath(&quot;//a[@href=\&quot;javascript:commonService.doPostBack(&apos;REFRESH&apos;);\&quot;]&quot;)).click();
Thread.sleep(3000);
				
//Check Message
wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(&quot;#ctl00_lblMessage&quot;)));
String elementText = driver.findElement(By.cssSelector(&quot;#ctl00_lblMessage&quot;)).getText();
	if(elementText.startsWith(&quot;Error: User&quot;) || elementText.startsWith(&quot;No journal pending for processing&quot;)){
		  //Thread.sleep(3000);
            driver.quit();
		     }
		else{			 
		  //Click Authorize ALL
            driver.findElement(By.xpath(&quot;//a[normalize-space()=&apos;Authorize All&apos;]&quot;)).click();
            System.out.println(&quot;Authorize All&quot;);
            
            //Click Process
            driver.findElement(By.xpath(&quot;//a[@href=\&quot;javascript:commonService.doPostBack(&apos;ADD&apos;);\&quot;]&quot;)).click();
            wait.until(ExpectedConditions.presenceOfElementLocated(By.cssSelector(&quot;#ctl00_lblMessage&quot;)));
            driver.quit();
		  }	
WDS.Log.info(&quot;Process Journal done!&quot;);
WDS.sampleResult.sampleEnd();

/////EnD///</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">groovy</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
